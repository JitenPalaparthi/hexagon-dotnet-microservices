
user  nginx;
worker_processes  auto;

events { worker_connections 1024; }

http {
  # Basic security & performance
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 4096;
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Upstreams to dotnet services
  upstream service_a_upstream {
    server service_a:8080;
  }
  upstream service_b_upstream {
    server service_b:8080;
  }

  server {
    listen 80;
    server_name localhost;
    # Redirect everything to HTTPS
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl http2;
    server_name localhost;

    # TLS certs (self-signed for local)
    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # Optional HSTS (comment during localhost testing if needed)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Path-based routing
    location /svc1/ {
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Prefix /svc1;
      rewrite ^/svc1/?(.*)$ /$1 break;
      proxy_pass http://service_a_upstream;
    }

    location /svc2/ {
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Prefix /svc2;
      rewrite ^/svc2/?(.*)$ /$1 break;
      proxy_pass http://service_b_upstream;
    }

    # Health
    location = /healthz {
      return 200 "ok";
      add_header Content-Type text/plain;
    }
  }
}
